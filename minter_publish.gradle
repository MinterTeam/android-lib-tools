/*
 * Copyright (C) by MinterTeam. 2018
 * @link https://github.com/MinterTeam
 *
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// DEFS

task printFlavors {
    String[] flavors = new String[android.productFlavors.size() * 2]

    int s = 0
    for (flavor in android.productFlavors) {
        flavors[s++] = flavor.name + "Debug"
        flavors[s++] = flavor.name + "Release"
    }

    for (fname in flavors) {
        println fname
    }
}

def pomDescription = (hasProperty("pomDescription") ? getProperty("pomDescription") : "Minter Blockchain Android SDK")

group = getProperty("group")
version = android.defaultConfig.versionName
def releaseGroup = this.group
def releaseVersion = this.version
def releaseArtifactId = project.name
def artifactName = ""

if(hasProperty("buildArtifactName") && !getProperty("buildArtifactName").isEmpty()) {
    releaseArtifactId = getProperty("buildArtifactName")
}

if(hasProperty("buildFlavor") && !getProperty("buildFlavor").isEmpty()) {
    def flavorName = getProperty("buildFlavor")
    flavorName = flavorName.substring(0,1).toLowerCase() + flavorName.substring(1)
    flavorName = flavorName.replace("Debug", "-debug").replace("Release", "-release")
    if(artifactName.isEmpty()) {
        artifactName = releaseArtifactId + "-" + flavorName + ".aar"
    } else {
        artifactName = artifactName + "-" + flavorName + ".aar"
    }
} else {
    artifactName = releaseArtifactId + ".aar"
}

if(hasProperty("artifactSuffix") && !getProperty("artifactSuffix").isEmpty()) {
    releaseArtifactId += "-" + getProperty("artifactSuffix")
}

println "Artifact name: \n\t${artifactName}"
println "Target gradle implementation:\n\timplementation '${releaseGroup}:${releaseArtifactId}:${version}'"

// TASKS
tasks.withType(Jar) {
    from(project.projectDir) {
        include 'LICENSE.txt'
        into 'META-INF'
    }
}

task androidJavadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    classifier = 'javadoc'
    from androidJavadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

publishing {
    publications {
        "${releaseArtifactId}"(MavenPublication) {
            groupId releaseGroup
            artifactId releaseArtifactId
            version releaseVersion

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${artifactName}")
            artifact androidSourcesJar
            artifact androidJavadocJar

            pom.withXml {
                asNode().appendNode("description", pomDescription)
                def licenses = asNode().appendNode("licenses")
                def mitLicense = licenses.appendNode("license")
                mitLicense.appendNode("name", "MIT License")
                mitLicense.appendNode("url", "https://opensource.org/licenses/MIT")
                mitLicense.appendNode("distribution", "repo")

                def developer = asNode().appendNode("developers").appendNode("developer")
                developer.appendNode("id", "edwardstock")
                developer.appendNode("name", "Eduard Maximovich")
                developer.appendNode("email", "edward.vstock@gmail.com")
                developer.appendNode("url", "https://github.com/edwardstock")
                developer.appendNode("roles").appendNode("role", "developer")
                developer.appendNode("timezone", "Europe/Moscow")

                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

//if (hasProperty("artifactoryUser") && hasProperty("artifactoryPass")) {
//
//    artifactory {
//        contextUrl = getProperty("artifactoryUrl")
//        publish {
//            repository {
//                version = releaseVersion
//                repoKey = "libs-release-local"
//                username = getProperty("artifactoryUser")
//                password = getProperty("artifactoryPass")
//                maven = true
//            }
//
//            defaults {
//                publications(releaseArtifactId)
//                publishConfigs('archives')
//                properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
//                publishBuildInfo = true
//                publishArtifacts = true
//                publishPom = true
//                publishIvy = false
//            }
//        }
//    }
//}